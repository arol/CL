<<
/* parser.dlg -- DLG Description of scanner
 *
 * Generated from: cl.g
 *
 * Terence Parr, Will Cohen, and Hank Dietz: 1989-2001
 * Purdue University Electrical Engineering
 * With AHPCRC, University of Minnesota
 * ANTLR Version 1.33MR33
 */

#define ANTLR_VERSION	13333
#include "pcctscfg.h"
#include "pccts_stdio.h"

#include <string>
#include <iostream>
#include <map>
#include <list>
#include <vector>
#include <fstream>

using namespace std;

#include <stdio.h>
#include <stdlib.h>
#include "ptype.hh"
#include "symtab.hh"
#include "codegest.hh"

/// struct to contain information about a token.
typedef struct {
  string kind;
  string text;
  int line;
} Attrib;

/// function called by the scanner when a new token is found
/// Predeclared here, definition below.
void zzcr_attr(Attrib *attr,int type,char *text);

/// Include AST node fields declaration
#include "myASTnode.hh"

/// Macro called by the parser when a new AST node is to be created
/// createASTnode function doing the actual job is defined below.
#define zzcr_ast(as,attr,tttype,textt) as=createASTnode(attr,tttype,textt);
AST* createASTnode(Attrib* attr, int ttype, char *textt);
#include "antlr.h"
#include "ast.h"
#include "tokens.h"
#include "dlgdef.h"
LOOKAHEAD

void
#ifdef __USE_PROTOS
zzerraction(void)
#else
zzerraction()
#endif
{
	(*zzerr)("invalid token");
	zzadvance();
	zzskip();
}
>>


%%START

@
	<<
		NLA = INPUTEND;
	>>

PROGRAM
	<<
		NLA = PROGRAM;
	>>

ENDPROGRAM
	<<
		NLA = ENDPROGRAM;
	>>

VARS
	<<
		NLA = VARS;
	>>

ENDVARS
	<<
		NLA = ENDVARS;
	>>

INT
	<<
		NLA = INT;
	>>

BOOL
	<<
		NLA = BOOL;
	>>

ITERATOR
	<<
		NLA = ITERATOR;
	>>

AND
	<<
		NLA = AND;
	>>

OR
	<<
		NLA = OR;
	>>

NOT
	<<
		NLA = NOT;
	>>

\<
	<<
		NLA = LESS;
	>>

\>
	<<
		NLA = MORE;
	>>

=
	<<
		NLA = EQUAL;
	>>

STRUCT
	<<
		NLA = STRUCT;
	>>

ENDSTRUCT
	<<
		NLA = ENDSTRUCT;
	>>

ARRAY
	<<
		NLA = ARRAY;
	>>

OF
	<<
		NLA = OF;
	>>

WRITELN
	<<
		NLA = WRITELN;
	>>

READ
	<<
		NLA = READ;
	>>

WRITE
	<<
		NLA = WRITE;
	>>

\+\+
	<<
		NLA = INCR;
	>>

\-\-
	<<
		NLA = DECR;
	>>

\!
	<<
		NLA = ITPOINT;
	>>

IF
	<<
		NLA = IF;
	>>

THEN
	<<
		NLA = THEN;
	>>

ELSE
	<<
		NLA = ELSE;
	>>

ENDIF
	<<
		NLA = ENDIF;
	>>

WHILE
	<<
		NLA = WHILE;
	>>

ENDWHILE
	<<
		NLA = ENDWHILE;
	>>

DO
	<<
		NLA = DO;
	>>

PROCEDURE
	<<
		NLA = PROCEDURE;
	>>

ENDPROCEDURE
	<<
		NLA = ENDPROCEDURE;
	>>

FUNCTION
	<<
		NLA = FUNCTION;
	>>

ENDFUNCTION
	<<
		NLA = ENDFUNCTION;
	>>

RETURN
	<<
		NLA = RETURN;
	>>

VAL|REF
	<<
		NLA = TYPEPARAM;
	>>

\+
	<<
		NLA = PLUS;
	>>

\-
	<<
		NLA = MINUS;
	>>

\*
	<<
		NLA = TIMES;
	>>

\/
	<<
		NLA = DIV;
	>>

\(
	<<
		NLA = OPENPAR;
	>>

\)
	<<
		NLA = CLOSEPAR;
	>>

\[
	<<
		NLA = OPENCLAU;
	>>

\]
	<<
		NLA = CLOSECLAU;
	>>

:=
	<<
		NLA = ASIG;
	>>

.
	<<
		NLA = DOT;
	>>

,
	<<
		NLA = COMMA;
	>>

TRUE|FALSE
	<<
		NLA = BOOLCONST;
	>>

[a-zA-Z][a-zA-Z0-9]*
	<<
		NLA = IDENT;
	>>

[0-9]+
	<<
		NLA = INTCONST;
	>>

//~[\n]*
	<<
		NLA = COMMENT;
    printf("%s",zzlextext); zzskip();   
	>>

[\ \t]+
	<<
		NLA = WHITESPACE;
    printf("%s",zzlextext); zzskip();   
	>>

\"[a-zA-Z0-9\ :\(\)\=]*\"
	<<
		NLA = STRING;
	>>

\n
	<<
		NLA = NEWLINE;
    zzline++; printf("\n%3d: ", zzline); zzskip();   
	>>

~[]
	<<
		NLA = LEXICALERROR;
    printf("Lexical error: symbol '%s' ignored!\n", zzlextext);
    zzLexErrCount++;
    zzskip();   
	>>

%%
